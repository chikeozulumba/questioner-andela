{"version":3,"sources":["../../src/controllers/Question.js"],"names":["validateOptions","required","format","Question","req","res","payload","body","validation","Validate","init","params","arrays","prepareContent","query","Query","save","then","docs","catch","code","err","id","path","Filters","last","url","split","question","getRecord","errorMsg","votes","fields","pos","update","toUpperCase"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,kBAAkB;AACvBC,WAAU,CAAC,OAAD,EAAU,MAAV,CADa,EACM;AAC7BC,SAAQ,CAAC,OAAD,CAFe,CAEJ;AAFI,CAAxB;;AAKA;;;;IAGMC,Q;;;;;;;;AACL;;;;yBAIcC,G,EAAKC,G,EAAK;AACvB,OAAIC,UAAUF,IAAIG,IAAlB;AACA,OAAMC,aAAaC,mBAASC,IAAT,CAAcJ,OAAd,EAAuBN,eAAvB,CAAnB;AACA,OAAIQ,eAAe,IAAf,IAAuB,OAAOA,UAAP,KAAsB,QAAjD,EAA2D,OAAO,wBAASH,GAAT,EAAc,GAAd,EAAmB,KAAnB,EAA0BG,UAA1B,CAAP;AAC3D,OAAMG,SAAS;AACdC,YAAQ;AADM,IAAf;AAGAN,aAAUG,mBAASI,cAAT,CAAwBP,OAAxB,EAAiCK,MAAjC,CAAV;AACA;AACA,OAAMG,QAAQ,IAAIC,eAAJ,CAAUT,OAAV,EAAmB,WAAnB,EAAgC,CAAC,OAAD,CAAhC,CAAd;AACA;AACA,UAAOQ,MAAME,IAAN,GACLC,IADK,CACA;AAAA,WAAQ,2BAAYZ,GAAZ,EAAiB,GAAjB,EAAsB,IAAtB,EAA4Ba,IAA5B,CAAR;AAAA,IADA,EAELC,KAFK,CAEC;AAAA,WAAO,wBAASd,GAAT,EAAcS,MAAMM,IAApB,EAA0B,KAA1B,EAAiCC,GAAjC,CAAP;AAAA,IAFD,CAAP;AAGA;;;uBAEWjB,G,EAAKC,G,EAAK;AACrB,OAAMiB,KAAKlB,IAAIO,MAAJ,CAAWW,EAAtB;AACA,OAAMC,OAAOC,kBAAQC,IAAR,CAAarB,IAAIsB,GAAJ,CAAQC,KAAR,CAAc,GAAd,CAAb,CAAb;AACA,OAAMb,QAAQ,IAAIC,eAAJ,CAAUO,EAAV,EAAc,WAAd,EAA2B,IAA3B,EAAiC,SAAjC,CAAd;AACA,OAAMM,WAAWd,MAAMe,SAAN,EAAjB;AACA,OAAI,CAACD,QAAL,EAAe,wBAASvB,GAAT,EAAcS,MAAMM,IAApB,EAA0B,KAA1B,EAAiCN,MAAMgB,QAAvC;AACf,OAAIP,SAAS,QAAb,EAAuB;AACtBK,aAASG,KAAT,IAAkB,CAAlB;AACA,IAFD,MAEO;AACN,QAAIH,SAASG,KAAT,KAAmB,CAAvB,EAA0BH,SAASG,KAAT,IAAkB,CAAlB;AAC1BH,aAASG,KAAT,GAAiB,CAAjB;AACA;AACDjB,SAAMR,OAAN,GAAgBsB,QAAhB;AACAd,SAAMkB,MAAN,GAAe,CAAC,OAAD,CAAf;AACA,OAAMC,MAAMX,KAAK,CAAjB;AACA,OAAIR,MAAMoB,MAAN,CAAaD,GAAb,CAAJ,EAAuB,2BAAY5B,GAAZ,EAAiB,GAAjB,EAAsB,IAAtB,EAA4BS,MAAMR,OAAlC;AACvB,UAAO,wBAASD,GAAT,EAAc,GAAd,EAAmB,KAAnB,wCAA8DkB,KAAKY,WAAL,EAA9D,CAAP;AACA;;;;;;kBAGahC,Q","file":"Question.js","sourcesContent":["import Validate from '../functions/validate';\nimport { errorRxx, response2xx } from '../functions/handlers';\nimport Query from '../functions/query';\nimport Filters from '../functions/filters';\n\nconst validateOptions = {\n\trequired: ['title', 'body'], // Required fields\n\tformat: ['title'], // Check Format\n};\n\n/**\n * Create Meetup Class\n */\nclass Question {\n\t/**\n\t * @param {object} req Controls Meetup Request\n\t * @param {object} res Controls to Meetup Response\n\t */\n\tstatic create(req, res) {\n\t\tlet payload = req.body;\n\t\tconst validation = Validate.init(payload, validateOptions);\n\t\tif (validation !== true && typeof validation === 'string') return errorRxx(res, 400, false, validation);\n\t\tconst params = {\n\t\t\tarrays: [],\n\t\t};\n\t\tpayload = Validate.prepareContent(payload, params);\n\t\t// ADD TO MEETUPS DATA\n\t\tconst query = new Query(payload, 'questions', ['title']);\n\t\t// SAVE MEETUP\n\t\treturn query.save()\n\t\t\t.then(docs => response2xx(res, 200, true, docs))\n\t\t\t.catch(err => errorRxx(res, query.code, false, err));\n\t}\n\n\tstatic vote(req, res) {\n\t\tconst id = req.params.id;\n\t\tconst path = Filters.last(req.url.split('/'));\n\t\tconst query = new Query(id, 'questions', null, 'integer');\n\t\tconst question = query.getRecord();\n\t\tif (!question) errorRxx(res, query.code, false, query.errorMsg);\n\t\tif (path === 'upvote') {\n\t\t\tquestion.votes += 1;\n\t\t} else {\n\t\t\tif (question.votes !== 0) question.votes += 1;\n\t\t\tquestion.votes = 0;\n\t\t}\n\t\tquery.payload = question;\n\t\tquery.fields = ['title'];\n\t\tconst pos = id - 1;\n\t\tif (query.update(pos)) response2xx(res, 200, true, query.payload);\n\t\treturn errorRxx(res, 500, false, `Internal server error, unable to ${path.toUpperCase()}`);\n\t}\n}\n\nexport default Question;\n"]}