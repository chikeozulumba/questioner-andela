{"version":3,"sources":["../../src/functions/validate.js"],"names":["stringValidation","ignore","format","payload","options","Error","body","fields","Object","entries","i","length","key","value","required","includes","undefined","test","prepareContent","params","arrays","keys","forEach","split","req","checkType","type","integer","init","checkRequiredFields","Validate"],"mappings":"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","file":"validate.js","sourcesContent":["const stringValidation = /^([a-zA-Z0-9,.!? @_-]+)$/;\nconst ignore = ['meetup', 'response'];\nconst format = (payload, options) => {\n\tif (typeof payload !== 'object') throw new Error(`Content must be of type 'object' not ${typeof body}`);\n\tconst fields = Object.entries(payload);\n\tfor (let i = 0; i < fields.length; i += 1) {\n\t\tconst key = fields[i][0];\n\t\tconst value = fields[i][1];\n\t\tif (options.required.includes(key) && !ignore.includes(key)) {\n\t\t\tif (typeof value === 'string' && value.length === 0) return `'${key}' field is empty.`;\n\t\t\tif (value.length < 3) return `'${key}' field is too short.`;\n\t\t\tif (options.format !== undefined && options.format.includes(key) && stringValidation.test(value) === false) return `${key} field contains invalid characters.`;\n\t\t}\n\t}\n\treturn true;\n};\n\nconst prepareContent = (payload, params) => {\n\tif (params !== null && params.arrays.length !== 0) {\n\t\tObject.keys(payload).forEach((key) => {\n\t\t\tif (params.arrays.includes(key)) payload[key] = payload[key].split(',');\n\t\t});\n\t}\n\treturn payload;\n};\n\nconst required = (payload, options) => {\n\tfor (let i = 0; i < options.required.length; i += 1) {\n\t\tconst req = options.required[i];\n\t\tif (payload[req] === undefined || payload[req] === null) return `'${req}' field is required.`;\n\t}\n\treturn true;\n};\n\nconst checkType = (payload, type) => {\n\t// eslint-disable-next-line valid-typeof\n\tconst integer = /^\\d+$/;\n\tswitch (type) {\n\tcase 'integer':\n\t\tif (!integer.test(payload)) return 'Parameter must be of type - integer';\n\t\treturn true;\n\tdefault:\n\t\treturn `Parameter must be of type ${type}, not ${typeof payload}`;\n\t}\n};\n\nconst init = (payload, options) => {\n\tif (options === null) return true;\n\tconst checkRequiredFields = required(payload, options);\n\tif (checkRequiredFields === true) return format(payload, options);\n\treturn checkRequiredFields;\n};\n\nconst Validate = { init, prepareContent, checkType };\n\nexport default Validate;\n"]}