{"version":3,"sources":["../../src/functions/query.js"],"names":["stringValidation","user","id","name","Query","payload","collection","fields","type","errorMsg","collections","data","checkProp","Validate","checkType","results","rsvp","params","Promise","resolve","reject","forEach","param","filter","toUpperCase","code","addQuery","then","res","push","catch","err","index","length","date","Date","formatted","format","getID","createdOn","addTImeStamp","createdBy","meetup","votes","upVoted","downVoted","permitted","parseInt","getUser","prepareQuestions","prepareRsvps","prepareMeetup","unique","prepare","Filters","sortArrayById"],"mappings":"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","file":"query.js","sourcesContent":["import moment from 'moment';\nimport data from '../mock/data';\nimport Validate from './validate';\nimport Filters from './filters';\n\nconst stringValidation = /^([a-zA-Z0-9,.!? @_-]+)$/;\nconst user = {\n\tid: 1,\n\tname: 'Chike',\n};\nclass Query {\n\t/**\n\t * Required method\n\t * @param {object} payload Object containig fields\n\t * @param {object} options Object containing additional options\n\t */\n\tconstructor(payload, collection, fields = null, type = null) {\n\t\tthis.payload = payload;\n\t\tthis.errorMsg = null;\n\t\tthis.collection = collection;\n\t\tthis.collections = [...data[collection]];\n\t\tthis.fields = fields;\n\t\tthis.checkProp = Validate.checkType(this.payload, type);\n\t\tthis.results = null;\n\t\tthis.rsvp = {};\n\t\tthis.user = user;\n\t}\n\n\tasync unique(payload, params) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (!params) resolve(true);\n\t\t\tparams.forEach((param) => {\n\t\t\t\tthis.collections.filter((collection) => {\n\t\t\t\t\tif (collection[param] === payload[param]) {\n\t\t\t\t\t\tthis.errorMsg = `'${payload[param]}' as ${param.toUpperCase()} field title already in use.`;\n\t\t\t\t\t\tthis.code = 400;\n\t\t\t\t\t\treturn reject(this.errorMsg);\n\t\t\t\t\t}\n\t\t\t\t\treturn resolve(true);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tasync save() {\n\t\treturn this.addQuery().then((res) => {\n\t\t\tif (res) this.collections.push(this.payload);\n\t\t\treturn Promise.resolve(this.payload);\n\t\t}).catch(err => Promise.reject(err));\n\t}\n\n\tupdate(index) {\n\t\tthis.collections[index] = this.payload;\n\t\treturn this.payload;\n\t}\n\n\tgetID() {\n\t\treturn this.collections.length + 1;\n\t}\n\n\tgetUser() {\n\t\treturn this.user;\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\taddTImeStamp() {\n\t\tconst date = new Date();\n\t\tconst formatted = moment(date).format('MM-DD-YYYY');\n\t\treturn formatted;\n\t}\n\n\t// PREPARE FOR MEETUP\n\tprepareMeetup() {\n\t\tthis.payload.id = this.getID();\n\t\tthis.payload.createdOn = this.addTImeStamp();\n\t\treturn this.payload;\n\t}\n\n\tprepareQuestions() {\n\t\tthis.payload.id = this.getID();\n\t\tthis.payload.createdOn = this.addTImeStamp();\n\t\tthis.payload.createdBy = 1;\n\t\tthis.payload.meetup = 1;\n\t\tthis.payload.votes = 0;\n\t\tthis.payload.upVoted = [];\n\t\tthis.payload.downVoted = [];\n\t\tthis.payload.permitted = true;\n\t\treturn this.payload;\n\t}\n\n\tprepareRsvps() {\n\t\tthis.payload.createdOn = this.addTImeStamp();\n\t\tthis.payload.id = this.getID();\n\t\tthis.payload.meetup = parseInt(this.payload.meetup, 10);\n\t\tthis.payload.user = this.getUser().id;\n\t\treturn this.payload;\n\t}\n\n\t// PREPARE FOR QUESTIONS\n\tprepare() {\n\t\tswitch (this.collection) {\n\t\tcase 'questions':\n\t\t\treturn this.prepareQuestions();\n\t\tcase 'rsvps':\n\t\t\treturn this.prepareRsvps();\n\t\tdefault:\n\t\t\treturn this.prepareMeetup();\n\t\t}\n\t}\n\n\tasync addQuery() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.unique(this.payload, this.fields)\n\t\t\t\t.then(res => resolve(this.prepare()))\n\t\t\t\t.catch(err => reject(err));\n\t\t});\n\t}\n\n\tgetRecord() {\n\t\tif (this.checkProp !== true) {\n\t\t\tthis.errorMsg = this.checkProp;\n\t\t\tthis.code = 400;\n\t\t\treturn false;\n\t\t}\n\t\tthis.results = Filters.sortArrayById(this.collections, this.payload);\n\t\tif (!this.results) {\n\t\t\tthis.errorMsg = 'Record not found';\n\t\t\tthis.code = 404;\n\t\t}\n\t\treturn this.results;\n\t}\n\n\tgetAllRecords() {\n\t\treturn this.collections;\n\t}\n}\n\nexport default Query;\n"]}